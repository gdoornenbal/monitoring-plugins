#!/bin/bash
# Author: Gerrit Doornenbal g(dot)doornenbal(at)hccnet(dot)nl
# Date: 5 mrt 2015
# Description: Used to monitor number of AP's in aruba instant cluster.
# Dependencies: net-snmp-utils
#
# License: This nagios plugin comes with ABSOLUTELY NO WARRANTY. You may redistribute copies of
# the plugins under the terms of the GNU General Public License. For more information about these 
# matters, see the GNU General Public License.
#
# Unfortunately the option -N is necessary, because when an AP is going down, it is first visible 
# as down, but after a while it is thrown out de configuration, and your FAILURE is gone...
#
# release 0.9.0 (5 mrt 2015)
#   * check number of AP's in VC, and check for down AP's.
#   * filter to get specified AP's. (i.e. specific location, floor etc.)
#   * get the total connected wireless devices.
#   * created statistics output.
# release 0.9.1 (16 april 2015)
#   * added -N as optional option. (count only)
#   * added -m option to check for overload of specific AP's
# release 0.9.2 (15 nov 2016)
#   * added -N accepting 2 values.
# todo/wishlist: (When i have time :-))
#   * number of devices attached per SSID. (not found de oid yet.. so it seems not possible.)
# release 0.9.3 (13 mar 2017)   
#	* resolved one small bug (spaces in VC-name)
#   * minor textual issues, expanded help with examples.
#
version=0.9.3

print_help_msg(){
	echo "Usage: check_aruba_instant -H <hostname> -C <community> [-N <AP-count> -F <AP-name-filter> -d -m <maxclients> -f]"
	echo 
	echo "Make sure to connect to the virtual controller (VC) ip address!"
	echo "Other options:"
	echo " -N  number of AP's expected"
	echo "      if not given the plugin wil only count, without any error states!"
	echo "      It is also possible to give two options (eg 2,4). This is for rare cases where at night AP's are turned off."
	echo " -d  Show number of wireless devices connected to the instant cluster / filtered"
	echo "     (In combination with -F option this can slow down the check performance.)"
	echo " -F  <AP-name> Filter on (partial) AP device name."
	echo " -m  maximum number of devices allowed per AP."
	echo "      This option only works with -F and -d option enabled"
	echo " -f  give also statistics info:"
	echo "      default: number of connected AP's"
	echo "      with option -d: connected AP's and connected wireless devices"
	echo " -V  version of this plugin."
	echo " -h or ? this help message."
	echo 
	echo "examples:"
	echo " This one check all AP's in your VC, compares this to N, and shows the number of devices connected."
	echo "     check_aruba_instant -H <VC-address> -C <community> -d -N 30"
	echo "     OK: VC aruba-stadhuis has found 30 AP's. 355 wireless devices are connected."
	echo
	echo " This one checks all AP's named as AP-2* in your VC, compares this to N, and shows the number of devices connected."
	echo " When an AP has more than 35 devices connected, a warning wil be given."
	echo "     check_aruba_instant -H <VC-address> -C <community> -F AP-2 -d -N 7 -m 35"
	echo "     OK: VC aruba-stadhuis has found 7 AP's. 107 wireless devices are connected."
}

community=""
hostname=""
ap_expected=0
filter=""
devices=0
stats=0
nagios_status=0
nagios_message=""
maxdevices=0
maxdev_err=""
nagios_state_msg="OK:"

while getopts C:H:N:F:m:?:hdfV options;
do
	case $options in
		C ) community="$OPTARG";;
		H ) hostname="$OPTARG";;
		N ) ap_expected="$OPTARG";;
		F ) filter="$OPTARG";;
		m ) maxdevices="$OPTARG";;
		d ) devices=1;;
		f ) stats=1;;
		V ) echo "${0##*/} version $version"
			exit 1;;
    	? ) print_help_msg
        	exit 1;;
        h ) print_help_msg
            exit 1;;
	esac
done

#check for minimal supplied options.
if [ "$community" == "" ] || [ "$hostname" == "" ] 
then
  print_help_msg 
  exit 1
fi

# Get the instant VC name (with quotes removed)
vcname=$(/usr/bin/snmpget -v 2c -c $community $hostname .1.3.6.1.4.1.14823.2.3.3.1.1.2.0 | sed 's/.*"\(.*\)"[^"]*$/\1/')
if [ "$vcname" = "" ] #When vcname not found, there was an error, so exit script.
then 
	echo "UNKNOWN: Could not connect to VC, no data available!"
	exit 3
fi

if [ "$filter" != "" ] 
then # There is a filter defined, so filter the AP's out...
# Get first all info we need into arrays with snmpwalk as this is much faster than single snmpget commands...
all_names=( $(/usr/bin/snmpwalk -v 2c -c $community $hostname .1.3.6.1.4.1.14823.2.3.3.1.2.1.1.2 | awk '{ print $4}' | sed -e 's/^"//' -e 's/"$//'))
all_states=( $(/usr/bin/snmpwalk -v 2c -c $community $hostname .1.3.6.1.4.1.14823.2.3.3.1.2.1.1.11 | awk '{ print $4}'))
all_ips=( $(/usr/bin/snmpwalk -v 2c -c $community $hostname .1.3.6.1.4.1.14823.2.3.3.1.2.1.1.3 | awk '{ print $4}'))
# set calculated values to zero.
num_of_ap=0
num_of_ap_down=0
num_devices_connected=0
# Walk trough all AP's, and retrieve info from filtered AP's 
	for (( i=0; i<${#all_names[@]}; i++ ));
	do 
		# Only do stuff when the filter is found.
		if [[ ${all_names[i]} == *$filter* ]]
		then
			num_of_ap=$[num_of_ap + 1] #count the AP.
				if [ ${all_states[i]} = 2 ] # check if AP is down.
				then
				num_of_ap_down=$[num_of_ap_down + 1]
				fi
			if [ $devices = 1 ] 
				then
				AP_devices_connected=$(/usr/bin/snmpwalk -v 2c -c $community $hostname .1.3.6.1.4.1.14823.2.3.3.1.2.4.1.4 | grep ${all_ips[i]} | wc -l)
				num_devices_connected=$((num_devices_connected + AP_devices_connected))
				#echo $AP_devices_connected
				if [ $maxdevices -gt 0 ] && [ $AP_devices_connected -gt $maxdevices ] 
					then
						#echo "${all_names[i]}: $AP_devices_connected devices "
						maxdev_err="$maxdev_err${all_names[i]}:$AP_devices_connected devices, "
					fi
			fi 
			#echo "${all_names[i]} ipadress ${all_ips[i]} ${all_states[i]}"; 
		fi
	done

else # Do the stuff with no filter (much faster)
#get the totals
num_of_ap=$(/usr/bin/snmpwalk -v 2c -c $community $hostname .1.3.6.1.4.1.14823.2.3.3.1.2.1.1.2 | wc -l)
num_of_ap_down=$(/usr/bin/snmpwalk -v 2c -c $community $hostname .1.3.6.1.4.1.14823.2.3.3.1.2.1.1.11 | grep "INTEGER: 2" | wc -l)
if [ $devices = 1 ] # get the total connected devices when asked.
	then
	num_devices_connected=$(/usr/bin/snmpwalk -v 2c -c $community $hostname .1.3.6.1.4.1.14823.2.3.3.1.2.4.1.3 | wc -l)
	fi
fi

#Loop trough all expected values
IFS=',' read -ra ap_exp_arr <<< $ap_expected
highest=0
lowest=0
if [ ${ap_exp_arr[0]} != 0 ] # check if check should be performed
then
	if ! [ ${ap_exp_arr[1]+abc} ] # test 1 or 2 values.
		then
		# only 1 value given.
		highest=${ap_exp_arr[0]}
		lowest=${ap_exp_arr[0]}
	else
		# two values given
		if [ ${ap_exp_arr[0]} -gt ${ap_exp_arr[1]} ] 
		then
		highest=${ap_exp_arr[0]}
		lowest=${ap_exp_arr[1]}
		else
		highest=${ap_exp_arr[1]}
		lowest=${ap_exp_arr[0]}
		fi
	fi
fi

# create the correct nagios output.
statistics="'connected_APs'=$num_of_ap;0;0;0;$highest"

#check for errors/warnings
if [ $num_of_ap -ge $highest ] || [ $num_of_ap -eq $lowest ]
	then
		nagios_message="VC $vcname has found $num_of_ap AP's."
		if [ $highest != 0 ] && [ $num_of_ap -gt $highest ]
		then
			nagios_message="$nagios_message ($highest AP's expected, so update your config!)"
		fi
	else
		nagios_message="VC $vcname has found $num_of_ap AP's but $highest were expected."
		nagios_state_msg="CRITICAL:"
		nagios_status=2
	fi


if [ $num_of_ap_down != "0" ] && [ $nagios_status = 0 ]
	then
		nagios_message="VC $vcname has found $num_of_ap AP's, $num_of_ap_down AP down!"
		nagios_state_msg="WARNING:"
		nagios_status=1
	fi

if [ "$maxdev_err" != "" ]
	then
		#echo "$maxdev_err !"
		nagios_message="$nagios_message OVERLOAD: ${maxdev_err%??}."
		nagios_state_msg="WARNING:"
		nagios_status=1
	fi

nagios_message="$nagios_state_msg $nagios_message"


# When devices are count, add text exit message
if [ $devices = 1 ] 
	then
	nagios_message="$nagios_message $num_devices_connected wireless devices are connected."
	statistics="$statistics 'connected_devices'=$num_devices_connected;0;0;0;0 "
	fi

# When stats are requested, add the calculated stats.
if [ $stats = 1 ] 
	then
	nagios_message="$nagios_message | $statistics"
	fi
# Exit plugin with values.	
echo -n $nagios_message
echo 
exit $nagios_status
